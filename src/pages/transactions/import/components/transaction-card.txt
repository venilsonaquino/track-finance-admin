import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { CheckCircle2, Save } from "lucide-react";
import { TransactionResponse } from "@/api/dtos/transaction/transactionResponse";
import { formatCurrency } from "@/utils/currency-utils";
import { AdvancedSettings } from "./advanced-settings";
import { WalletResponse } from "@/api/dtos/wallet/wallet-response";
import { CategoryResponse } from "@/api/dtos/category/category-response";
import { Button } from "@/components/ui/button";

interface TransactionCardProps {
  transaction: TransactionResponse;
  wallets: WalletResponse[];
  categories: CategoryResponse[];
  errors: { [key: string]: string };
  onWalletChange: (fitId: string, walletId: string) => void;
  onCategoryChange: (fitId: string, categoryId: string) => void;
  onDescriptionChange: (fitId: string, description: string) => void;
  onRecurringChange: (fitId: string, isRecurring: boolean) => void;
  onInstallmentChange: (fitId: string, isInstallment: boolean) => void;
  onInstallmentTotalChange: (fitId: string, total: string) => void;
  onRecurringIntervalChange: (
    fitId: string,
    interval: "DAILY" | "MONTHLY" | "WEEKLY" | "YEARLY" | null
  ) => void;
  onSave: (transaction: TransactionResponse) => Promise<void>;
}

export const TransactionCard = ({
  transaction,
  wallets,
  categories,
  errors,
  onWalletChange,
  onCategoryChange,
  onDescriptionChange,
  onRecurringChange,
  onInstallmentChange
}: TransactionCardProps) => {
  return (
    <Card
      className={`p-4 transition-all ${
        transaction.isFitIdAlreadyExists
          ? "bg-muted border-muted-foreground/20"
          : "hover:shadow-md"
      }`}
    >
      <div className="flex flex-col sm:flex-row sm:items-start justify-between gap-4">
        <div className="space-y-2 flex-1">
          <div className="flex items-center gap-2">
            <div className="flex items-center gap-2 group w-full">
              <Input
                type="text"
                value={transaction.description}
                onChange={(e) => onDescriptionChange(transaction.fitId, e.target.value)}
                disabled={transaction.isFitIdAlreadyExists}
                className={`font-medium ${
                  transaction.isFitIdAlreadyExists
                    ? "bg-transparent border-none p-0 text-muted-foreground"
                    : ""
                }`}
              />
            </div>
          </div>
          <div className="flex flex-wrap items-center gap-2 text-sm text-muted-foreground">
            <span>{new Date(transaction.depositedDate).toLocaleDateString("pt-BR")}</span>
            <span>•</span>
            <span>{transaction.bankName}</span>
            {transaction.isRecurring && (
              <>
                <span>•</span>
                <span className="text-primary bg-primary/10 px-2 py-0.5 rounded-full text-xs">
                  Fixo
                </span>
              </>
            )}
            {transaction.isInstallment && (
              <>
                <span>•</span>
                <span className="text-primary bg-primary/10 px-2 py-0.5 rounded-full text-xs">
                  Parcelado
                </span>
              </>
            )}
          </div>
        </div>
        <p
          className={`text-lg font-semibold whitespace-nowrap ${
            Number(transaction.amount) < 0
              ? transaction.isFitIdAlreadyExists
                ? "text-destructive/70"
                : "text-destructive"
              : transaction.isFitIdAlreadyExists
              ? "text-emerald-500/70"
              : "text-emerald-500"
          }`}
        >
          {formatCurrency(Number(transaction.amount))}
        </p>
      </div>

      <div className="mt-4 space-y-4">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-[1fr_1fr_auto] items-end gap-4">
          <div>
            <label className="text-sm font-medium">Carteira</label>
            <Select
              value={
                typeof transaction.wallet === "object" && transaction.wallet
                  ? transaction.wallet.id
                  : wallets[0]?.id || ""
              }
              onValueChange={(value) => onWalletChange(transaction.fitId, value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Selecione uma carteira" />
              </SelectTrigger>
              <SelectContent>
                {wallets.map((wallet) => (
                  <SelectItem key={wallet.id!} value={wallet.id!}>
                    {wallet.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="text-sm font-medium">Categoria</label>
            <Select
              value={
                typeof transaction.category === "object" && transaction.category
                  ? transaction.category.id
                  : categories[0]?.id || ""
              }
              onValueChange={(value) => onCategoryChange(transaction.fitId, value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Selecione uma categoria" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {!transaction.isFitIdAlreadyExists && (
            <Button
              onClick={() => onSave(transaction)}
              size="default"
              className="gap-2 h-10"
              variant="outline"
            >
              <Save className="w-4 h-4" />
              Salvar
            </Button>
          )}
        </div>

        {!transaction.isFitIdAlreadyExists && (
          <>
            <AdvancedSettings
              transaction={transaction}
              errors={errors}
              onRecurringChange={onRecurringChange}
              onInstallmentChange={onInstallmentChange}
              onInstallmentTotalChange={onInstallmentTotalChange}
              onRecurringIntervalChange={onRecurringIntervalChange}
            />
          </>
        )}
      </div>
      {transaction.isFitIdAlreadyExists && (
        <div className="flex items-center gap-2 text-primary bg-primary/10 px-3 py-1.5 rounded-md text-sm font-medium w-full">
          <CheckCircle2 className="h-4 w-4" />
          Transação já processada
        </div>
      )}
    </Card>
  );
}; 